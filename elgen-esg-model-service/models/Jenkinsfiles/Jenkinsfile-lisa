pipeline {
    agent any
    environment {
        IMAGE_NAME          = "lisa-elgen-esg-model"
        //ACR configs
        registryUrl         = "elyadatacr.azurecr.io"
        registryCredential  = "acr-credentials"
        //K8S config
        KS8_CONFIG_NAME     = "local-k3s-kubeconfig"
        KS8_NAMESPACE       = "elgen-dev"
        KS8_DEPLOYMENT_NAME = "elgen-esg-model"
        // SONAR CONFIG
        SONAR_TOKEN = credentials('SonarCloud-Server-authentication-token')
        SONAR_HOST = "https://sonarcloud.io"
        SONAR_PROJECT = "elyadata_elgen-esg-model-service"
        //Enable BuildKit in order to skip unnecessary stages and process only needed ones.
        DOCKER_BUILDKIT = 1
    }
    options {
        office365ConnectorWebhooks([[
                startNotification: true,
                notifySuccess: true,
                notifyFailure: true,
                url: 'https://elyadata.webhook.office.com/webhookb2/8977ddf0-a410-404c-b1bd-57e099dc5614@d95ea478-174a-401a-847f-f58ca5311905/JenkinsCI/cf92bc55c2a94176a0e0599e12b04976/d2e5ff3b-2451-4de3-b98f-57de1ad94421'
            ]]
        )
    }
    stages {
        stage('Build tests image'){
            steps{
               script{
                    sh "docker build --target tester -t ${IMAGE_NAME}-testing-${GIT_COMMIT}:latest ${WORKSPACE}/."
                }
            }
        }
        stage('Run tests container') {
            steps {
                script{
                    sh "docker run --name ${IMAGE_NAME}-testing-container-${GIT_COMMIT} ${IMAGE_NAME}-testing-${GIT_COMMIT}:latest"
                    sh "docker cp ${IMAGE_NAME}-testing-container-${GIT_COMMIT}:/app/reports/coverage.xml ./coverage.xml"
                    sh "docker cp ${IMAGE_NAME}-testing-container-${GIT_COMMIT}:/app/reports/pytest-report.xml ./pytest-report.xml"
                    sh "docker cp ${IMAGE_NAME}-testing-container-${GIT_COMMIT}:/app/reports/pylint-report.xml ./pylint-report.xml"
                } // script
            } // steps
        } // Run tests container
        stage('SonarQube Analysis') {
            when {
                anyOf{
                    branch 'develop'
                    branch 'master'
                }
            }
            steps{
                script{
                    docker.image('sonarsource/sonar-scanner-cli:5.0.1').inside('-v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""') {
                        sh "sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT} \
                            -Dsonar.organization=elyadata \
                            -Dsonar.sources=. \
                            -Dsonar.exclusions=configuration/**,tests/** \
                            -Dsonar.host.url=${SONAR_HOST} \
                            -Dsonar.python.coverage.reportPaths=coverage.xml \
                            -Dsonar.python.xunit.reportPath=pytest-report.xml \
                            -Dsonar.python.pylint.reportPaths=pylint-report.xml \
                            -Dsonar.branch.name=${env.BRANCH_NAME} \
                            -Dsonar.python.version=3.10"
                    }
                }
            }
        } // Sonar Scanner
        stage('SonarQube Analysis on PR') {
            when {
                changeRequest()
            }
            steps{
                script{
                    docker.image('sonarsource/sonar-scanner-cli:5.0.1').inside('-v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""') {
                        sh "sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT} \
                            -Dsonar.organization=elyadata \
                            -Dsonar.sources=. \
                            -Dsonar.exclusions=configuration/**,tests/** \
                            -Dsonar.host.url=${SONAR_HOST} \
                            -Dsonar.pullrequest.base=${env.CHANGE_TARGET} \
                            -Dsonar.pullrequest.branch=${env.BRANCH_NAME} \
                            -Dsonar.pullrequest.key=${env.CHANGE_ID} \
                            -Dsonar.python.coverage.reportPaths=coverage.xml \
                            -Dsonar.python.xunit.reportPath=pytest-report.xml \
                            -Dsonar.python.pylint.reportPaths=pylint-report.xml \
                            -Dsonar.python.version=3.10"
                    }
                }
            }
        } // Sonar Scanner
        stage('Building Docker image') {
            when {
                anyOf{
                    branch 'develop'
                    branch 'master'
                }
            }
            steps {
                script{
                    img = docker.build("${IMAGE_NAME}:latest")
                }
            }
        }
        // Scan Docker image
        stage('Scanning Docker image'){
            when {branch 'develop'}
            steps{
                script{
                    try{
                        sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            bitnami/trivy:0.44.0 image \
                            --exit-code 1 \
                            --severity CRITICAL \
                            --no-progress $IMAGE_NAME:latest"
                    } catch (Exception e) {
                        echo 'Vulnerability of CRITICAL severity has been found.'
                    }
                }
            }
        }
        // Uploading Docker images into ACR
        stage('Upload Image to ACR') {
            when{ branch 'develop'}
            steps{
                script {
                    docker.withRegistry( "http://${registryUrl}", registryCredential ) {
                        img.push()
                    }
                }
            }
        }
        stage('Deployment Rollout') {
            when{ branch 'develop'}
            steps {
                script{
                    docker.image('bitnami/kubectl').inside("--entrypoint=''"){
                        withKubeConfig([credentialsId: "$KS8_CONFIG_NAME", namespace: "$KS8_NAMESPACE"]) {
                            sh "kubectl -n $KS8_NAMESPACE rollout restart deployment/$KS8_DEPLOYMENT_NAME"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
