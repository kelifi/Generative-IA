from datetime import datetime
from uuid import UUID

from pydantic import BaseModel, Field


class PromptInputSchema(BaseModel):
    prompt: str = Field(..., description="Prompt to be fed to the model.")


class QuestionClassificationSchema(BaseModel):
    content: str = Field(..., description="Content of the question to be classified.")


class ModelServiceAnswer(BaseModel):
    response: str = Field(..., description="Answer generated by the model.")
    prompt_length: int | None = Field(default=None, description="Total prompt length in terms of tokens.")
    inference_time: float = Field(..., description="Inference time in terms of seconds.")
    model_code: str = Field(..., description="The exact code of the model used for generating the answer")
    model_name: str = Field(..., description="The exact code of the model name for generating the answer")
    metadata: dict | None = Field(None, description="can include additional analytics about the generated answer")
    prompt: str | None = Field(None, description="Full prompt used to generate the answer")


class ModelSourcesUpdateSchema(BaseModel):
    code: str = Field(description="The code of the model")
    max_web: int = Field(description="How many web sources to return", ge=0)
    max_doc: int = Field(description="How many document sources to return", ge=0)


class ModelOutputSchema(ModelSourcesUpdateSchema):
    name: str = Field(description="The name of the model")
    available: bool = Field(description="A flag indicating whether the model is available or not")
    default: bool = Field(description="A flag indicating whether this model should be used by default or not")

    class Config:
        orm_mode = True


class ModelInputSchema(ModelOutputSchema):
    route: str = Field(description="The route of the model, that will be used to call the appropriate model service")
    type: str = Field(description="The type of the model")


class ModelSchema(ModelInputSchema):
    """A pydantic model for the Model Table"""
    id: UUID = Field(description="The uuid of the model")
    creation_date: datetime = Field(description="The creation date of the model")
    update_date: datetime | None = Field(description="The update date of the model")

    class Config:
        orm_mode = True


class AvailableModelsOutputSchema(BaseModel):
    models: list[ModelOutputSchema]
