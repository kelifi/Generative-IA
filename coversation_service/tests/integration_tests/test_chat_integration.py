from fastapi import status

from source.helpers.db_helpers import DBHelper
from source.schemas.answer_schema import AnswerRatingEnum
from source.services.model_service import ModelService
from tests.fixtures import client, scope_session
from tests.integration_tests.data_model_mock import random_user_id, question_db_id, answer_db_id
from tests.test_data import example_answer
from tests.utils import assert_custom_equality_between_objects


def test_int_create_answer(client, scope_session, monkeypatch):
    """test if creating an answer is successful"""
    monkeypatch.setattr(DBHelper, "create_db_local_session", scope_session)
    monkeypatch.setattr(ModelService, "request_model_service_per_code",
                        lambda self, text, model_code: example_answer)

    expected = {'id': '62abcde0-2b5e-4944-b30e-95c727931adb', 'answer': {'id': 'f1d3441e-648a-4dd9-b88b-e06952ee6c34',
                                                                         'content': 'This is an example answer generated by the model.',
                                                                         'creationTime': '2023-09-04T12:21:24.565125',
                                                                         'updatedAt': '2023-09-04T12:21:24.565078',
                                                                         'rating': None, 'edited': False}}
    response = client.get(f"/chat/answer/{question_db_id}",
                          headers={'user-id': random_user_id, 'model-code': 'M1'})
    assert response.status_code == status.HTTP_200_OK
    assert response.json().get('id') == expected.get('id')
    assert_custom_equality_between_objects(object1=response.json().get('answer'), object2=expected.get('answer'),
                                           fields_to_exclude=['id', 'creationTime', 'updatedAt'])


def test_int_update_rating(client, scope_session, monkeypatch):
    """Testing if updating an answer's rating is successful"""
    monkeypatch.setattr(DBHelper, "create_db_local_session", scope_session)
    response = client.put(f"/chat/answer/rating", headers={'user-id': random_user_id},
                          json={'answerId': answer_db_id, 'rating': AnswerRatingEnum.LIKE})
    assert response.status_code == status.HTTP_200_OK
    assert response.json() == {'detail': 'Rating updated succesfully!'}


def test_int_create_prompt(client, scope_session, monkeypatch):
    """Test if creating a prompt is successful"""
    monkeypatch.setattr(DBHelper, "create_db_local_session", scope_session)
    monkeypatch.setattr(ModelService, "request_model_service_per_code",
                        lambda self, text, model_code: example_answer)
    response = client.get(f"/chat/prompt/{question_db_id}", headers={'user-id': random_user_id, 'model-code': 'M1'})

    assert response.status_code == status.HTTP_200_OK
    assert response.json() == {
        'prompt': "Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n                Document content 1\n\n                This is an example answer generated by the model.\n\n                Question: Question content 1\n                "}


def test_int_update_answer_content(client, scope_session, monkeypatch):
    """Test if updating an answer is successful"""
    monkeypatch.setattr(DBHelper, "create_db_local_session", scope_session)
    expected = {'content': 'updated answer', 'creationTime': '2023-08-03T15:19:36', 'edited': True,
                'id': '40b9be8f-6f95-4f4a-9caa-591c0b55faf9', 'rating': None, 'updatedAt': '2023-09-04T14:33:24.930745'}
    response = client.put("/chat/answer", headers={'user-id': random_user_id},
                          json={'id': answer_db_id, 'content': 'updated answer'})
    assert response.status_code == status.HTTP_200_OK
    assert_custom_equality_between_objects(object1=response.json(), object2=expected,
                                           fields_to_exclude=['updatedAt'])


def test_int_get_last_versioned_answer(client, scope_session, monkeypatch):
    """Test if updating an answer is successful"""
    monkeypatch.setattr(DBHelper, "create_db_local_session", scope_session)
    expected = {'author': 'author1', 'content': 'version1', 'createdAt': '2023-08-03T15:19:36', 'edited': False,
                'id': 'd875d722-be7e-48bb-89f1-d78960ba4eea', 'rating': None, 'updatedAt': '2023-09-04T16:27:27.436897'}
    response = client.get(f"/chat/answer/{answer_db_id}/history/latest", headers={'user-id': random_user_id})
    assert response.status_code == status.HTTP_200_OK
    assert_custom_equality_between_objects(object1=response.json(), object2=expected,
                                           fields_to_exclude=['updatedAt', 'id'])
